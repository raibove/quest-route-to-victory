id: guard_the_gates
learningObjectives: 
- Users will learn how to restrict access to pages by creating a PrivateRoute component which will redirect the user to Login Page if user try to access protected page without authentication.
hints:
- User will need to create a new component called as `PrivateRoute`.
- User can refer to the example from documentaion to understand how to create private route https://v5.reactrouter.com/web/example/auth-workflow
startFlow:
  do:
  - actionId: bot_message
    params:
      person: keen
      messages:
      - text: "So, after investigating the issue, we've determined that the problem lies with the routing of our website. Specifically, the **settings** and **editor** page are not properly protected, allowing unauthenticated users to access them."
        delay: 1500
      - text: "To prevent this happening from future our team has decided to fix the issue. To fix this, you need to create a React Component called as `PrivateRoute` that will handle protection of these pages. You can use `react-router-dom` to handle the logic."
        delay: 1500
      - text: "Can you please create the component and add necessary logic to ensure only authenticated users can access the restricted pages. "
trigger:
  type: github_pr_lifecycle_status
  flowNode:
    switch:
      key: "${eventType}"
      cases:
        github_pr_opened:
          do:
          - actionId: bot_message
            params:
              person: keen
              messages:
              - text: "On it, I'll review the changes right away."
                delay: 1000
          - actionId: github_pr_comment
            params:
              person: keen
              message: "On it, I'll review the changes right away."
        github_pr_workflow_complete_success:
          do:
          - actionId: bot_message
            params:
              person: keen
              messages:
              - text: "Nailed it! Excellent job @${user.githubuser}! You can now merge the PR."
                delay: 2000
          - actionId: github_pr_approve
            params:
              person: keen
              message: "Nailed it! Excellent job @${user.githubuser}! You can now merge the PR."
        github_pr_workflow_complete_failure:
          do:
          - actionId: bot_message
            params:
              person: keen
              messages:
              - text: "Make sure your fix passes all the checks, then try again please."
                delay: 3000
          - actionId: github_pr_reject
            params:
              person: keen
              message: "Looks like this code change didnâ€™t fix the problem. Can you take a second look?"
        github_pr_merged:
          do:
          - actionId: finish_step
